package com.interra.XSD;

import java.io.File;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.testng.annotations.Test;

import com.interra.Base.Logger;
import com.interra.Controller.LogManager;
import com.interra.Library.Configuration;

import generated.ChecksType;
import generated.Customchecks;
import generated.Error;
import generated.Errors;
import generated.Field;
import generated.Field.CompositionTimecode;
import generated.Field.HDRMetadata.MastDisParams;
import generated.Field.HDRMetadata.MastDisParams.MastDisParameters;
import generated.Field.HDRMetadata.MastDisParams.MastDisParameters.MstrDispMaxLuminance;
import generated.Info;
import generated.MXFChecks;
import generated.ObjectFactory;
import generated.Streamnode;
import generated.Substream;
import generated.Systemencodingchecks;
import generated.TaskReport;

public class XML4 {
	public static void setLog() {
		LogManager.accessLogManager().createLogDirectory("XML_4");
	}
	
	@Test
	public void XML3(){
		try{
			setLog();

			/**********************
			 * Creating List of All the XMLs inside a folder
			 ***********************/
			String XmlPath = Configuration.accessConfiguration().getXMLPath("XML_4");

			JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);
			Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
			TaskReport taskReport = (TaskReport) unmarshaller.unmarshal(new File(XmlPath));
			
			/**********************
			 * Parse Task Report TAG Information
			 ***********************/
			System.out.println(" ###### Printing Items of TaskReport Tags #####");
			
			/**********************
			 * Parse Top Level tag information
			 ***********************/
			
			System.out.println("toplevelinfo >> summary : " + taskReport.getToplevelinfo().getSummary());
			int parmname = 0;
			List<Streamnode> listofStreamsNodes = taskReport.getStreamnode();
		    System.out.println(listofStreamsNodes);
		    int count =0;
		    int metadatacount = 0;
		    int metadatavalue = 0;
		    int mastdidParameter = 0;
		    int mastDispParmValue = 0;
		    int Timecodevalue = 0;
		    int cplFileext = 0;
		    int substreamCheck = 0;
		    int mxfcheck = 0;
		    for (Streamnode item : listofStreamsNodes) {
			    List<Object> streamChildren = item.getErrorsOrInfoOrSummary();
			    Info infoobj = (Info) streamChildren.get(1);
			   
		      for(Field fieldobj : infoobj.getField()){
			    	for (Object objFieldEntry : fieldobj.getEntry()) {
			    		System.out.println(objFieldEntry.getClass());
			    		
			    		if(objFieldEntry.getClass().toString().contains("HDRMetadata")){
			    			if(count ==0)
			    		{
			    		try{		
			    		Field.HDRMetadata hdrMetadata = (Field.HDRMetadata) objFieldEntry;
			    		List<Object> hdrMetadataobj = hdrMetadata.getCPLFileAndMaxCLLAndMaxCLLValue();
			    		Field.HDRMetadata.MaxCLL maxCLL = (Field.HDRMetadata.MaxCLL) hdrMetadataobj.get(0);
			    		Field.HDRMetadata.MaxCLLValue maxCLLvalue = (Field.HDRMetadata.MaxCLLValue) hdrMetadataobj.get(1);
			    		Field.HDRMetadata.MaxFALL maxFall = (Field.HDRMetadata.MaxFALL) hdrMetadataobj.get(2);
			    		Field.HDRMetadata.MaxFALLValue maxFallValue = (Field.HDRMetadata.MaxFALLValue) hdrMetadataobj.get(3);
			    		Field.HDRMetadata.MastDisParams mastdisparams = (Field.HDRMetadata.MastDisParams)hdrMetadataobj.get(4);
			    		if(maxCLL.toString().contains("MaxCLL") && maxCLLvalue.toString().contains("MaxCLLValue") && maxFall.toString().contains("MaxFALL") && maxFallValue.toString().contains("MaxFALLValue")){
			    			metadatacount = 1;
			    		}
			    		if(maxCLL.getValue()!=null && maxCLLvalue.getValue()!=null && maxFallValue.getValue()!=null && maxFallValue.getValue()!=null){
			    			metadatavalue = 1;
			    		}
			    		for(Object mastdisobj : mastdisparams.getMastDisParameters()){
			    		  MastDisParams.MastDisParameters mastdisparametresobj = (MastDisParams.MastDisParameters)mastdisobj;
			    		  List<Object> mastdisparameter = mastdisparametresobj.getDescriptorIDAndMstrDisplayPrimariesAndMstrDispWhitePointChrom();
			    		  MastDisParameters.MstrDispMaxLuminance mstrDispMaxLuminance = (MastDisParameters.MstrDispMaxLuminance)mastdisparameter.get(0);
			    		  MastDisParameters.MstrDispMinLuminance mstrDispMinLuminance = (MastDisParameters.MstrDispMinLuminance)mastdisparameter.get(1);
			    		  MastDisParameters.MstrDispWhitePointChrom mstrDispWhitePointChrome = (MastDisParameters.MstrDispWhitePointChrom)mastdisparameter.get(2);
			    		  MastDisParameters.MstrDisplayPrimaries mstrDispplayprimaries = (MastDisParameters.MstrDisplayPrimaries)mastdisparameter.get(3);
			    		  System.out.println(mastdisparametresobj.toString().length());
			    		
			    		if(mastdisparametresobj.toString().length()> 4){
			    			mastdidParameter = 1;	    			
			    		}
			    		if(mstrDispMaxLuminance.getValue().equals(mstrDispMinLuminance.getValue()) && mstrDispMaxLuminance.getValue().equals(mstrDispWhitePointChrome.getValue()) && mstrDispMaxLuminance.getValue().equals(mstrDispplayprimaries.getValue())){
			    			System.out.println("All value are same");
			    			mastDispParmValue = 1;
			    	   }
			    		if(metadatacount ==1 && metadatavalue==1 && mastdidParameter == 1 && mastDispParmValue == 1)
			    		{
			    			System.out.println("all value are correct");
			    			count = 1;
			    		}
			    		}
			    		}
			    		catch (Exception e) {
							System.out.println(e.getMessage());
						}
			    		}			    		
			    	}
			    		else if(objFieldEntry.getClass().toString().contains("CompositionTimecode")){
			    			try{
			    			Field.CompositionTimecode compositionTimecode = (Field.CompositionTimecode)objFieldEntry;			    			
			    			List<Object> compositionTimecodeobj = compositionTimecode.getCPLFileAndTimecodeStartAddress();
			    			Field.CompositionTimecode.TimecodeStartAddress timeCodeStartAddressobj = (Field.CompositionTimecode.TimecodeStartAddress)compositionTimecodeobj.get(0);
			    			String timecodeStartaddress =  timeCodeStartAddressobj.getValue();
			    			if(timecodeStartaddress.equals("00:00:00:00")){
			    				Timecodevalue = 1;
			    				System.out.println(Timecodevalue);
			    			}
			    		}
			    			catch (Exception e) {
			    				System.out.println(e.getMessage());
			    			}
			    		}
			    		else if(objFieldEntry.getClass().toString().contains("IMFAppType")){
			    			try{
			    			Field.IMFAppType imfAppType = (Field.IMFAppType)objFieldEntry;
			    			List<Object> imfAppTypeobj = imfAppType.getCPLFileAndApplicationType();
			    			Field.IMFAppType.ApplicationType applicationType = (Field.IMFAppType.ApplicationType)imfAppTypeobj.get(0);
			    			Field.IMFAppType.CPLFile cplFile = (Field.IMFAppType.CPLFile)imfAppTypeobj.get(1);
			    			if(cplFile.getValue().toString().contains("xml") && applicationType.getValue()!= null ){
			    				cplFileext = 1;
			    			}
			    			
			    		}
			    			catch (Exception e) {
			    				System.out.println(e.getMessage());
			    			}	
			    		}
			   
			    	}
		
			    		
			    	} 
		      Logger.accessLogger().addReport("streamnode>>>>info>>field>>HDRMetadata(contains MaxCLL,MaxCLLValue,MaxFALL and MaxFALLValue)::" , 1,
						"EQ", metadatavalue, 1); 
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>HDRMetadata(MaxCLL,MaxCLLValue,MaxFALL and MaxFALLValue value should not be null)::" , 1,
						"EQ", metadatavalue, 1);
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>HDRMetadata>>MastDisParams>>MastDisParameters(Size is greater than 4)::" , 1,
						"EQ", mastdidParameter, 1);
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>HDRMetadata>>MastDisParams>>MastDisParameters(value are same for MstrDispMaxLuminance,MstrDispMinLuminance,MstrDispWhitePointChrom and MstrDisplayPrimaries)::" , 1,
						"EQ", mastDispParmValue, 1);
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>CompositionTimecode>>TimecodeStartAddress(value = 00:00:00:00)::" , 1,
						"EQ", Timecodevalue, 1);
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>IMFAppType>>CPLFile(file extension is .xml)::" , 1,
						"EQ", cplFileext, 1);
			    Logger.accessLogger().addReport("streamnode>>>>info>>field>>IMFAppType>>ApplicationType(value should not be null)::" , 1,
						"EQ", cplFileext, 1);
			    }
		           Streamnode streamnode1 = listofStreamsNodes.get(1);
		           List<Object> secondStreamnodeChild = streamnode1.getErrorsOrInfoOrSummary();
		           generated.Substream substreamobj = (Substream) secondStreamnodeChild.get(3);
		           System.out.println(substreamobj);
		           try{
		        	   
		           if(substreamobj.getError().toString().equals("45") && substreamobj.getFileName().toString().equalsIgnoreCase("FOX-DC3-HDR-AM-CF-31909_FTR-1_C_EN-EN_US-NR_51_QHD_20170208_OV_01.mxf")){
		        	   List<Object> subStreamchild = substreamobj.getErrorsOrInfoOrSummary();
		        	   generated.Errors error = (Errors) subStreamchild.get(0);
		        	   for(Customchecks errorcustom1: error.getCustomchecks()) {
		        		   for(ChecksType checktype: errorcustom1.getDecoded3DvideochecksOrGIFimagechecksOrCanopusvideochecks()){
		        			    	if(checktype.getName().equalsIgnoreCase("System Level") && checktype.getSectionName().equalsIgnoreCase("Common")){
		        			    		substreamCheck = 1;
		        			    	}
		        			    	else if(checktype.getName().equalsIgnoreCase("MXF")){
		        			    		mxfcheck = 1;
		        			    	}
		        		   }
		        	   }
		        	   
		           }
		           Logger.accessLogger().addReport("streamnode>>substream(Error = 45 and fileName = FOX-DC3-HDR-AM-CF-31909)>>errors>>customchecks>>systemencodingchecks(name = System Level and SectionName = Common)::" , 1,
							"EQ", substreamCheck, 1);
		           Logger.accessLogger().addReport("streamnode>>substream(Error = 45 and fileName = FOX-DC3-HDR-AM-CF-31909)>>errors>>customchecks>>MXFChecks(name = MXF)::" , 1,
							"EQ", substreamCheck, 1);
		           }
		           
		           catch (Exception e) {
						System.out.println(e.getMessage());
					}

		    }
		
			catch (Exception e) {
				System.out.println(e.getMessage());
			}
	}
}
