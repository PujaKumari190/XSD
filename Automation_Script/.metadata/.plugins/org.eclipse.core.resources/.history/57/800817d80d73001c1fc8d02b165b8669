package com.interra.XSD;
import java.io.File;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.testng.annotations.Test;

import com.google.inject.internal.Errors;
import com.interra.Base.Base;
import com.interra.Base.Logger;
import com.interra.Controller.LogManager;
import com.interra.Library.Configuration;

import generated.Error;
import generated.Field;
import generated.Hierarchy;
import generated.Info;
import generated.ObjectFactory;
import generated.Streamnode;
import generated.TaskReport;

public class XML2 extends Base {
	static ArrayList<String> listofFiles = new ArrayList<String>();
	
	public static void setLog() {
		LogManager.accessLogManager().createLogDirectory("XML_2");
		// Logger.accessLogger().setLogFile(logpath);
	}
	@Test
	public void XML2() {

		try {
			
			setLog();

			/**********************
			 * Creating List of All the XMLs inside a folder
			 ***********************/
			String XmlPath = Configuration.accessConfiguration().getXMLPath("XML_2");

			JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);
			Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
			TaskReport taskReport = (TaskReport) unmarshaller.unmarshal(new File(XmlPath));
			
			/**********************
			 * Parse Task Report TAG Information
			 ***********************/
			System.out.println(" ###### Printing Items of TaskReport Tags #####");
			
			/**********************
			 * Parse Top Level tag information
			 ***********************/
			
			System.out.println("toplevelinfo >> summary : " + taskReport.getToplevelinfo().getSummary());
			String summary = taskReport.getToplevelinfo().getSummary();
			Logger.accessLogger().addReport("toplevelinfo >> summary:: " + summary, 1, "EQ",
					summary != null ? 1 : 0, 1);
			String info = taskReport.getToplevelinfo().getInfo();
			Logger.accessLogger().addReport("toplevelinfo >> info:: " + info, 1, "EQ",
					info != null ? 1 : 0, 1);
			/**************************
			 * Parse Hierarchy
			 **************************/
			System.out.println("Hierachy :" + taskReport.getHierarchy());
			Hierarchy hierarchy = taskReport.getHierarchy();
			Logger.accessLogger().addReport("Hierachy value" + hierarchy , 1, "EQ", hierarchy!=null ? 1:0,1);
			
			
			/**********************
			 * Info about Stream Nodes
			 ***********************/

			int streamNodeSize = taskReport.getStreamnode().size();
			Logger.accessLogger().addReport("Total Stream Nodes Present:: " + streamNodeSize, 1, "EQ",
					taskReport.getStreamnode().size() > 1 ? 1 : 0, 1);
			List<Streamnode> listofStreamsNodes = taskReport.getStreamnode();
			for(Streamnode node : listofStreamsNodes){
				System.out.println(" streamnode >> Start Time code: " + node.getStartTimecode());
				Logger.accessLogger().addReport("streamnode>>Fetching Data for Start Time code ::" + node.getStartTimecode(), 1,
						"EQ", node.getStartTimecode() != null ? 1 : 0, 1);		
		}
			int startTime = 0;
			int flag = 0;
			int count =0;
			for(Streamnode node : listofStreamsNodes){
				List<Object> streamchild = node.getErrorsOrInfoOrSummary();
				Info infoObj = (Info) streamchild.get(1);
				System.out.println(infoObj.getField());
				for (Field fieldItems : infoObj.getField()) {
					System.out.println(fieldItems.getMedia());
					if(fieldItems.getMedia().contains("Video")){
						count++;
					}
					

					if (fieldItems.getMedia().equals("video")) {
						Logger.accessLogger().addReport(
								"streamnode(" + fieldItems.getMedia() + ")>>info>>field(media)::", 1, "EQ",
								fieldItems.getMedia() != null ? 1 : 0, 1);
						for (Object objFieldEntry : fieldItems.getEntry()) {
							System.out.println(objFieldEntry.getClass());
							if (objFieldEntry.getClass().toString().contains("SpecifiedLayout")) {
								Field.SpecifiedLayout objFieldSL = (Field.SpecifiedLayout) objFieldEntry;
								List<Field.SpecifiedLayout.Segment> segmentList = objFieldSL.getSegment();
								for (Field.SpecifiedLayout.Segment objSegment : segmentList) {
									if(objSegment.getStarttimecode()!= null){
										startTime = 1;
									}
								}
							}
							if (objFieldEntry.getClass().toString().contains("ActualLayout")) {
								Field.ActualLayout objFieldSL = (Field.ActualLayout) objFieldEntry;
								List<Field.ActualLayout.Segment> segmentList = objFieldSL.getSegment();
									for (Field.ActualLayout.Segment objSegment : segmentList) {
										if (objSegment.getType().equals("Content")) {
											Logger.accessLogger().addReport(
													"streamnode(" + node.getStreamName() + ")>>info>>field("
															+ fieldItems.getName()
															+ ")>>ActualLayout>>Segment(Type-Content,FrameDuration-24)::",
													1, "EQ", objSegment.getFrameDuration() == "67" ? 1 : 0, 1);
											flag = 1;
						}
				
				}
				}
			}
						
				}
					Logger.accessLogger().addReport(
							" StreamNode>>Info>>Field(ContentLayout)>>specifiedLayout>>segment(Start_Timecode)",
							1, "EQ", startTime == 1 ? 1 : 0, 1);
					Logger.accessLogger().addReport(
							"Going to access StreamNode>>Info>>Field(ContentLayout)>>actualLayout>>segment(Type-Content, FrameDuration-67)",
							1, "EQ", flag == 1 ? 1 : 0, 1);
			}
			}

			
		}catch (Exception e) {
			System.out.println(e.getMessage());

		}

}
	}

